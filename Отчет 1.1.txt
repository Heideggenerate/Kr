Оглавление 
Задание на практику        3 
Введение        4 
Неформальная постановка задачи        6 
Формальная постановка задачи        8 
Алгоритм работы программы        10 
Спецификация данных        13 
Спецификация функций программы        16 
Проектирование программы        17 
Описание данных        18 
Макет на языке проектирования        21 
Тестирование        22 
Результаты тестирования        24 
Заключение        30 
Список использованных источников        30 


 
 
2 
Задание на практику 
Подготовка прототипа программного средства и составление документации к нему в соответствие с поставленной задачей. 
 
         3
 
Введение 
Место прохождения и период проведения практики: 
 Институт математики и компьютерных технологий ДВО Р, г. Владивосток, ул. 
Радио, 5 
27.06.2025 – 10.07.2025 
Цели практики: 
Подготовка прототипа программного средства и составление документации к нему в соответствие с поставленной задачей.  
Задачи практики: 
1. Разработка формальной постановки задачи; 
2. Разработка алгоритма решения задачи; 
3. Разработка спецификации данных программы; 
4. Разработка спецификации функций программы; 
5. Разработка проекта программы; 
6. Составление описания данных программы; 
7. Разработка алгоритма на языке проектирования PDL; 
8. Тестирование программы; 
9. Представление результатов тестирования. 
Описание: 
         Программа написана на языке C# и представляет собой игру 
«Трубопровод», состоящую из множества окон и форм, полей и лейблов. «Игра» – окно, в котором пользователь управляет созданием «труб» путём обработки событий нажатия кнопкой мыши. 
Программа написана с использованием структурного с элементами объектно-ориентированного программирования – одного из принципов разработки программного кода.  
Для визуализации был использован графический модуль Avalonia и класс Canvas (пространство имен: Avalonia.Controls), а также дополнительные компоненты из Avalonia.Media для отрисовки линий и цветных точек.
 
Метод разработки программы – модульный. Способ разработки – спиральный. Программа разрабатывалась демократической командой из 4х человек. Роль программиста занимает Верховцов Денис, программного библиотекаря и дизайнера – Воробьева Кристина, тестировщика и дизайнера – Гончарук Данил, программиста – Мамедов Шамиль.
________________
Неформальная постановка задачи 
Программа представляет собой графическое поле определенного размера (зависит от уровня), которое разбито на клетки. В некоторых из них находятся точки, которые необходимо соединить между собой по соответствию цвету. 
Точки не могут находиться за пределами клеток. Проведение линий между мини происходит при удержании любой кнопки мыши в момент наведения пользователем на выбранную им точку и движения после этого в выбранную сторону. При проведении линия не может выйти за пределы поля. 
Уровни головоломки хранятся в файле «levels.json», размещенном в директории «Levels/». Каждый уровень описывается структурой, включающей его название, размеры поля и координаты пар точек, представленных цветом. Название файла и структура позволяют программе загружать и обрабатывать уровни в автоматическом режиме. 
Игра «Трубопровод» имеет 10 уровней, где 1-ый уровень – самый лёгкий, а все последующие наращивают сложность. Уровень 10 – самый сложный. Параметры графического окна зависят от текущего уровня. 
Во время прохождения уровня по центру сверху от графического окна отображается информация о текущем уровне. Также сверху слева находится кнопка для выхода в главное меню, а справа сверху – кнопка для сброса прогресса проходимого уровня, слева снизу есть таже кнопка для перехода к предыдущему уровню. Далее, после успешного прохождения уровня, открывается возможность для прохождения следующего, расположение линий не сохраняется после перехода на другой уровень.
Игра имеет одно меню – «Меню №1»: 
Окно «Меню №1»: 
«Меню №1» открывается при запуске программы. Также к нему можно будет выйти из окон «О игре», «Выберите уровень» и «Игра», нажав на соответствующую кнопку «В меню» и кнопку «Меню» для окна «Игра»
Кнопки: 
В окне «Меню №1» можно увидеть следующие кнопки: «Играть», «О игре», «Выход»: 
* «Играть» → появляется окно «Выберите уровень», где пользователь должен выбрать его для прохождения. После пользователь переходит в окно «Игра», начиная с 1-го уровня. 
* «О игре» → переход к окну «О игре». 
* «Выход» →Закрывает программу. 
Окно «О игре»: 
Окно «О игре» содержит определенный текст с использованием установленного форматирования (цвет, шрифт, выделение и размер шрифта). Окно «Выберите уровень»: 
Окно «Выберите уровень» содержит 10 кнопок, каждая из которых ведет к определенному уровню игры. Изначально открыт только «Уровень 1», следующие же открываются после прохождения предыдущего к ним уровня. 
Окно «Игра»: 
Окно «Игра» состоит из названия уровня, кнопок «Меню», «Сброс», «Предыдущий уровень», «Следующий уровень» и игрового поля, на котором с использованием библиотек и классов Avalonia UI отрисованы точки, клетки и линии, при их проведении.
Формальная постановка задачи 
Входные данные: 
1.1 Конфигурация уровней (levels.json)
Levels = {level[i] | i ∈ [1;20]}, где level[i] = (id, name, rows, columns, points) - множество уровней из файла конфигурации уровней , где:
* id ∈ ℕ - идентификатор уровня
* name ∈ String - название уровня
* rows, columns ∈ ℕ - размеры сетки
* points ⊆ P - множество точек уровня
1.2 Прогресс игры (progress.json)
Progress = {(levelId, wasEverCompleted) | levelId ∈ ℕ, wasEverCompleted ∈ {true, false}} - множество сохраненного прогресса игры
1.3 Пользовательский ввод
Input = {
mouseClick: (x, y) ∈ ℕ × ℕ,
buttonClick: action ∈ {nextLevel, mainMenu, about}
}
Выходные данные: 
MainWindow = (contentControl), где contentControl отображает один из следующих элементов:
1. MainPage – начальный экран игры с основными элементами навигации
3. LevelSelectPage – экран выбора уровня, где пользователь может выбрать доступный уровень для игры 
4. GamePage – основной игровой экран
5. AboutPage – информационный экран с описанием игры
5. ModalWindow – всплывающее окно для уведомлений о завершении уровня или всей игры
Все элементы управляются через соответствующие ViewModel и отображаются в главном окне приложения (MainWindow) через его ContentControl.
Формализованные связи: 


Алгоритм работы программы 
1. Главное Меню. 
   1. Выбор и нажатие кнопки. 
      1. Если нажата кнопка «Играть». 
         1. Переход к пункту 2 (Выбор уровня). 
      2. Если нажата кнопка «О игре». 
         1. Переход к пункту 5 (Окно «О игре»). 
      3. Если нажата кнопка «Выход». 
         1. Переход к пункту 6 (Выход). 
2. Окно выбора уровней. 
   1.  Отображение сетки доступных уровней. 
   2.  Если уровень доступен.
      1. Загрузка выбранного уровня.
      2. Переход к пункту 3 (Игровое поле). 
   3.  Если нажата кнопка "В меню". 
      1. Переход к пункту 1 (Главное меню).
3. Игровое поле.
   1.  Загрузка уровня. 
      1. Получение текущего уровня из состояние игры.
      2. Создание игрового поля заданного размера и отрисовка сетки.
      3. Размещение цветных точек согласно конфигурации уровня. 
      4. Вычисление размерности уровня в зависимости от данных уровня.
   2.  Обработка игровых действий. 
      1. При наведении на точку и нажатии кнопки мыши.
         1. Если точка цветная и не соединена.
* Начало нового пути.
* Установка текущего цвета.
      1. При движении мыши с зажатой кнопкой мыши.
         1. Если есть активный путь и курсор над допустимой точкой.
* Если это конечная точка того же цвета.
   * Завершение пути.        
   * Проверка завершения уровня.
      * При завершении уровня переход к пункту 4.
* Если это промежуточная точка.
   * Добавление точки в путь.
   * Проверка пересечений.
   * При наличии пересечений удаление пересекаемого пути.
      1. При отпускании кнопки мыши.
         1. Если есть активный путь.
* Если конечная точка имеет тот же цвет, что и начальная.
   * Сохранение пути.
* Иначе.
   * Отмена пути.
      1. Если нажата кнопка «Сброс».
         1. Очистка всех путей.
         2. Переход к пункту 3.2. 
      2. Если нажата кнопка «Меню».
         1. Переход к пункту 2 (Выбор уровней).
      3. Если нажата кнопка «Предыдущий уровень».
         1. Если текущий уровень не первый.
* Очистка всех путей.
* Переход на предыдущий уровень.
* Переход к пункту 3.1.
      1. Если нажата кнопка «Следующий уровень».
         1. Если текущий уровень пройден И текущий уровень не последний.
* Очистка всех путей.
* Переход на следующий уровень.
* Переход к пункту 3.1.
4. Завершение игры. 
   1.  Сохранение прогресса в локальное хранилище.
   2.  Если есть следующий уровень.
      1. Разблокировка следующего уровня 
      2. Если уровень последний
         1. Отображение модального окна с сообщением о прохождении игры и кнопкой «В меню».
*  Если нажата кнопка «В меню».
   * Переход к пункту 2 (Выбор уровня).
      1. Иначе
         1. Отображение модального окна с сообщением о прохождении игры и кнопкой «Следующий уровень».
* Если нажата кнопка «Следующий уровень».
   * Переход к пункту 3.2.7.1.


5. Окно «О игре». 
   1. Отображение информации об игре.
   2. Если нажата кнопка «В меню».
      1. Переход к пункту 1 (Главное меню).. 
6. Выход. 
Спецификация данных 
Input: 
1. Входной файл с уровнями (levels.json)
Входной JSON-файл содержит массив уровней, каждый из которых включает: 
* «id» – уникальный идентификатор уровня 
* «name» – название уровня (например, "Уровень 1") 
* «rows» – количество строк в сетке 
* «columns» – количество столбцов в сетке
* «colorPoints» – массив цветных точек для соединения
   * «row» – позиция точки по строке
   * «column» – позиция точки по столбцу
   * «color» – цвет точки (поддерживаемые: "Red", "Blue", "Green", "Yellow", "Purple", "Orange", "Pink", "Cyan", "Gray", "Lime")
  

Рисунок №1. Пример входного файла с уровнями (levels.json)


2. Файл с прогрессом (progress.json)
Автоматически создаваемый файл для сохранения прогресса, который включает: 
* «id» – уникальный идентификатор
* «WasEverCompleted» – состояние уровня (пройден или нет)
  

Рисунок №2. Файл прогресса (progress.json)
3. Пользовательские действия
* Клики мыши – выбор точек для создания путей
* Движение с зажатой кнопкой мыши – создание линий между точками
Output: 
1. Пользовательский интерфейс игры
* Главное меню (рисунок 3)
* Экран выбора уровня (рисунок 4)
* Игровой экран (рисунок 5)
* Информационный экран (рисунок 6)
* Модальные окна (рисунок 7)


  

Рисунок №3. Главное меню
  

Рисунок №4. Экран выбора уровней
  

Рисунок №5. Игровой экран
  

Рисунок №6. Информационный экран
  

Рисунок №7. Модальное окно
2. Файл прогресса (progress.json) – Автоматически сохраняемый файл с прогрессом игрока
 
Спецификация функций программы 
1. Считывание и обработка входного файла. 
2. Считывание и обработка нажатия мыши. 
3. Визуализация. 
4. Игровой процесс. 
5. Навигация.
6. Запись во внешний файл. 
7. Вывод данных. 
Проектирование программы
  
 
Описание данных 
Имя 
	Назначение 
	Тип данных 
	Mainmenu 
	Модуль, содержащий форму, кнопки и контейнеры 
	Модуль 
	

	Модуль «MainPageViewModel» 
	

	PlayCommand
	 Команда для обработки нажатия кнопки «Играть» (переход к выбору уровня) 
	ICommand 
	AboutCommand
	Команда для обработки нажатия кнопки «О игре» (переход к странице "О игре"
	ICommand 
	ExitCommand 
	Команда для обработки нажатия кнопки «Выход» (завершение приложения)
	ICommand  
	_navigation
	Интерфейс для навигации между страницами 
	Object()
	Exit 
	Процедура завершения приложения 
	Procedure()
	

	

	

	GameCanvas 
	Пользовательский элемент для отрисовки игрового поля, точек и линий
	 Object(GameCanvas)
	DataContext
	Связь с ViewModel, содержащей игровую логику (GameViewModel) 
	Object(GameViewModel)
	GamePage()  
	Конструктор, инициализирующий компоненты и подписку на события
	Procedure()
	GamePage_DataContextChanged
	Процедура, обновляющая DataContext для GameCanvas при изменении ViewModel 
	Procedure (оbject? sender , EventArgs e)   | 
	         18 


	Модуль «GameCanvas» 
	

	PointerReleased 
	Событие отпускания указателя  
	EventHandler ; 
	PointerPressed 
	Процедура обработки движения кнопок мыши над текстовым полем 
	EventHandler 
	PointerMoved 
	Событие перемещения указателя
	EventHandler 
	GameCanvas()
	Конструктор, инициализирующий компонент
	Procedure (); 
	 OnDataContextChanged
	Метод, вызываемый при изменении контекста данных (ViewModel), осуществляет переназначение данных
	Procedure (EventArgs e);
	Draw
	 Метод отрисовки игрового поля и элементов
	Procedure (); 
	Add
	Метод для добавления нового графического объекта (точки, линии и т.п.) 
	Procedure (Control control); 
	GetPoint 
	Возвращает точку игрового поля по координатам указателя (преобразует позицию в ячейку)
	Function (Avalonia.Point pos):Point? 
	OnPointer
	Обрабатывает нажатие и движение указателя: начало и продолжение пути   
	Procedure (Avalonia.Point pos, bool isPress); 
	OnPointerReleased
	 Обрабатывает отпускание указателя: завершение пути 
	Procedure (Avalonia.Point pos); 
	

	Модуль «Point» 
	

	 Id   
	Уникальный идентификатор точки     
	integer 
	Row  
	Индекс строки, где расположена точка 
	integer 
	Column
	Индекс столбца, где расположена точка  
	integer  
	Color
	Цвет точки
	IBrush
	HasColor 
	 Флаг, указывающий, назначен ли цвет у точки
	bool
	Point
	 Конструктор. Инициализирует Id, Row, Column, Color
	Procedure (int id , int row, int column, IBrush? color = null )
	

	Модуль «Path» 
	

	PathId
	 Уникальный идентификатор пути     
	String 
	LastSelectedPoint
	 Последняя выбранная (активная) точка в данном пути 
	Point?
	PathColor
	Цвет, которым нарисован данный путь 
	IBrush?
	Points 
	Список точек, входящих в данный путь
	List<Point> 
	         19 
Модуль «Line» 
	StartPoint  
	Начальная точка линии 
	Point
	EndPoint
	Конечная точка линии
	Point 
	Color 
	Цвет линии 
	IBrush
	PathId 
	 Идентификатор пути, к которому принадлежит линия 
	String  
	Line
	 Конструктор, инициализирует все свойства линии
	Procedure(Point startPoint, Point endPoint, IBrush? color = null, string? pathId = null)
	Модуль «Level» 
	Id 
	Уникальный идентификатор уровня 
	Integer
	Name 
	Название уровня 
	String 
	Rows
	Количество строк в сетке 
	Integer
	Columns
	Количество столбцов в сетке
	Integer
	Points
	 Коллекция всех точек уровня 
	List<Point >
	 Lines
	Коллекция всех линий уровня
	List<Line >
	Paths
	Словарь путей: ключ — идентификатор пути, значение — список линий пути
	Dictionary<string, List<Line>>
	WasEverCompleted
	Флаг, указывающий, был ли уровень когда-либо пройден  
	bool
	Level
	 Конструктор по умолчанию, инициализирует коллекции 
	Procedure()
	Модуль «ColorPointDto» 
	Row 
	Строка, в которой расположена точка
	Integer
	Column  
	Столбец, в котором расположена точка  
	Integer
	Color 
	 Цвет точки (в виде строки)
	String 
	Модуль «LevelDto» 
	 Id  
	Уникальный идентификатор уровня  
	Integer
	Name
	Название уровня
	String 
	Rows
	Количество строк в сетке                                              
	Integer
	Columns
	Количество столбцов в сетке 
	Integer
	ColorPoints
	Список цветных точек (ColorPointDto)                                  
	List<ColorPointDto>
	ToLevel
	Преобразует DTO в игровую модель Level
	Function (Dictionary<string, IBrush> colorMap):Level
	Модуль «LevelData» 
	Levels
	Список DTO уровней (LevelDto), описывающих все параметры уровня 
	List<LevelDto>
	Модуль «LevelLoader» 
	 _levelsPath
	Путь к файлу с уровнями (используется для чтения JSON)
	String 
	_colorMap
	Словарь отображения строковых названий цветов в кисти Avalonia 
	Dictionary<string, IBrush>
	LevelLoader
	Конструктор. Устанавливает путь и инициализирует карту цветов   
	Procedure(string levelsPath = "Levels/levels.json")
	LoadLevels
	Загружает уровни из JSON-файла, преобразует их в список Level  
	List<Level>
	Модуль «GameState» 
	Levels
	Список всех уровней игры
	List<Level>
	CurrentLevelIndex
	Индекс текущего уровня в списке Levels
	Integer
	GameState
	Конструктор. Инициализирует Levels, индекс и сохраняет сервис путей 
	Procedure(IPathService pathService)
	CurrentLevel
	 Активный уровень (Level) или null, если индекс вне диапазона 
	Level?
	HasNextLevel 
	 Есть ли следующий уровень (для навигации по уровням) 
	bool
	Модуль «GameStorageService» 
	_savePath
	Путь к файлу сохранения прогресса (используется для сериализации JSON)  
	String 
	 GameStorageService
	 Конструктор. Устанавливает путь по умолчанию для файла сохранения 
	Procedure()
	SaveProgress
	Сохраняет прогресс по списку уровней в файл (_savePath) 
	Procedure(List<Level> levels)
	LoadProgress
	Загружает прогресс из файла (_savePath) и обновляет состояние уровней в переданном списке
	Procedure(List<Level> levels)
	Модуль «GameService» 
	_navigation
	Сервис навигации между экранами/ViewModel
	INavigation?
	_modalService 
	 Сервис показа модальных окон 
	IModalService
	_pathService 
	Сервис работы с путями/соединениями точек на уровне  
	IPathService
	_gameStorage
	 Сервис хранения прогресса игры 
	IGameStorageService
	GameService
	Конструктор, принимает сервисы модальных окон, путей и хранения 
	Procedure(IModalService modalService, IPathService pathService, IGameStorageService gameStorage)
	 SetNavigation
	 Устанавливает экземпляр навигационного сервиса
	Procedure(INavigation navigation)
	ResetAllPaths
	Сбрасывает все пути и соединения на всех уровнях 
	Procedure(GameState gameState)
	NextLevel
	Переходит к следующему уровню, сбрасывая состояние 
	Procedure(GameState gameState)
	 CheckLevelCompletion
	Проверяет завершён ли текущий уровень, при успехе инициирует обработку завершения
	Function (GameState gameState):bool
	HandleLevelCompletion
	Обрабатывает успешное завершение уровня (отметка, сохранение, показ модального окна, переход к следующему) 
	Procedure(GameState gameState)
	 ShowGameCompletionModal
	 Показывает модальное окно завершения всей игры 
	Procedure()
	 ShowLevelCompletionModal
	Показывает модальное окно завершения уровня 
	Procedure(GameState gameState)
	 ShowModal
	Показывает модальное окно


	Procedure(string title, string message, string buttonText, Action action)
	LoadProgress
	Загружает прогресс из хранилища
	Procedure(GameState gameState)
	SaveProgress
	Сохраняет прогресс игры
	Procedure(GameState gameState)
	

	

	

	

	

	

	

	

	

	*Примечание: Большая часть переменных, указанных в формальной постановке задачи и формальных связях были реализованы в разделе implementation, что и делает данные переменные скрытыми от глаз обычных пользователей данных модулей, и по той же причине данные переменные, процедуры и функции не указаны в разделе описания данных в силу своей скрытости. 
 
         20 
 
 
Макет на языке проектирования  
(Ссылка для просмотра макета на языке программирования Pascal) 
Актуальность выделения данного пункта в отдельный файл заключается в том, что макет представляет из себя код для множества форм проекта «Лабиринт». Код размещён на 31 листе формата A4 с исходным форматированием среды программирования PascalABC.Net. 
Выделение данного пункта в примечание к отчёту также не является оптимальным, а также не благоразумным вариантом размещения по той же причине, почему модуль выделяется в отдельный файл. 
https://dvfustud-
my.sharepoint.com/:w:/g/personal/verkhovtcov_do_dvfu_ru/EVUwAMywgeBNsr HnX5qc4bkBMCd95ctOWyzcKDbi-FEV-A?e=WVvNj0 
 
21 
Тестирование 
Способ тестирования: чёрный ящик. 
* Тест № 1: 
Нажатие на «Меню» во время игры. Ожидаемый результат: выход в окно выбора уровня. 
* Тест № 2: 
Соединение точек по прямой. 
Ожидаемый результат: появление прямой линии в цвет выбранной точки. 
* Тест № 3: 
Соединение точек по кривой. 
Ожидаемый результат: появление кривой линии в цвет выбранной точки. 
* Тест № 4: 
Нажать «Сброс» после соединения точек. 
Ожидаемый результат: все проведенные линии пропадут. 
* Тест № 5: 
Нажать на кнопку «Следующий уровень» до завершения текущего. 
Ожидаемый результат: Ничего не произойдет. 
* Тест № 6: 
Нажать на кнопку «Предыдущий уровень». 
Ожидаемый результат: Переход к предыдущему уровню. 
* Тест № 7: 
Пройти уровень. 
Ожидаемый результат: переход на следующий уровень. 
* Тест № 8: 
Нажать на кнопку «Играть» из главного меню. 
Ожидаемый результат: выход в окно выбора уровня.  
* Тест № 9: 
Нажать кнопку «О игре». 
Ожидаемый результат: выход в окно «О игре». 
* Тест № 10: 
Нажать на кнопку «Выход». 
Ожидаемый результат: выход на рабочий стол, закрытие программы. 
* Тест № 11: 
Нажать на кнопку «Предыдущий уровень» на 1 уровне. 
Ожидаемый результат: ничего не произойдет. 
* Тест № 12: 
Пройти 10 уровень.
Ожидаемый результат: открытие победного окна.  
Результаты тестирования 
  

Рисунок №8. Тест 1
Результат: открылось окно выбора уровня.
  

Рисунок №9. Тест 2
Результат: появилась прямая синяя линия.
  

Рисунок №10. Тест 3
Результат: появилась кривая красная линия.
  

Рисунок №11. Тест 4 
Результат: пропали все имеющиеся линии. 
  

Рисунок №12. Тест 5
Результат: ничего не произошло.
  

Рисунок №13. Тест 6 
Результат: текущий уровень был заменен предыдущим. 
 
  

Рисунок №14. Тест 7 
Результат: вывод победного окна и предложения перейти на следующий уровень. 
  

Рисунок №15. Тест № 8 
Результат: вывод окна выбора уровня. 
 
  

Рисунок №16. Тест № 9: 
Результат: программа вывела окно «О игре». 
  

Рисунок №17. Тест № 10: 
Результат: программа завершила работу. 
  

Рисунок №18. Тест № 11: 
Результат: ничего не произошло. 
  
 
Рисунок 19. Тест 12 
Результат: вывод сообщения о завершении всех уровней. 
          


         
 
Заключение 
Задачи, поставленные для прохождения практики, выполнены полностью. 
В процессе выполнения практики приобретены навыки работы с графическим фреймворком Avalonia UI, языком программирования C#, а также навыки работы в команде, навыки тестирования программного средства и составления документации по нему. 
 
Список использованных источников 
1. Avalonia UI Documentation. Электронный ресурс.  – Режим доступа: https://docs.avaloniaui.net [дата обращения 1.07.2025]
2. Microsoft C# Language Reference. Электронный ресурс. – Режим доступа: https://learn.microsoft.com/en-us/dotnet/csharp [дата обращения 27.06.2025]
3. Json.NET. Электронный ресурс. – Режим доступа: https://www.newtonsoft.com/json [дата обращения 5.07.2025]